AddCSLuaFile( "cl_init.lua" )
AddCSLuaFile( "shared.lua" )
include( "shared.lua" )
gemotions = gemotions
isstring = isstring
istable = istable
:Log = gemotions
:Send = net

PRE_HOOK = PRE_HOOK or HOOK_MONITOR_HIGH
resource.AddWorkshop( "3198355085" )

-- Emotions Packages
do

    :packages = gemotions

    gemotions.RegisterPackage = ( packageName, emotions ) ->
        assert( isstring( packageName ), "Package name must be a string!" )
        assert( istable( emotions ), "Package emotions must be a table!" )

        packageData = packages[ packageName ]
        packageIndex = packageData == nil and ( #packages + 1 ) or packageData.id

        for index = 1, #emotions
            emotion = emotions[ index ]
            if emotion ~= nil
                emotion.id = index

        packageData = {
            name: packageName
            emotions: emotions
            id: packageIndex
        }

        Log( "Package '" .. packageName .. "' was registered." )
        packages[ packageIndex ] = packageData
        packages[ packageName ] = packageData
        return

-- Legacy support
do

    :match, :sub, :upper, :GetFileFromFilename = string
    :RegisterPackage = gemotions

    gemotions.Register = ( packageName, packageData ) ->
        for index = 1, #packageData
            emotion = packageData[ index ]
            if emotion ~= nil
                fileName = match( GetFileFromFilename( emotion[ 1 ] ), "([^.]+)" )
                packageData[ index ] = {
                    name: upper( sub( fileName, 1, 1 ) ) .. sub( fileName, 2 )
                    material: emotion[ 1 ]
                    sound: emotion[ 2 ]
                }

        RegisterPackage( packageName, packageData )
        return

-- Networking
util.AddNetworkString( "GEmotions::Networking" )

startNetSync = ->
    net.Start( "GEmotions::Networking" )
    net.WriteUInt( 0, 2 )
    net.WriteTable( gemotions.packages, true )

gemotions.StartNetSync = startNetSync

hook.Add( "SetupMove", "GEmotions::SetupMove", ( ply, _, cmd ) ->
    if ply.m_bGEmotionsInitialized or not ( cmd\IsForced! or ply\IsBot! )
        return

    unless ply\IsBot!
        startNetSync!
        Send( ply )

    Log( "Player '#{ply}' was initialized." )
    ply.m_bGEmotionsInitialized = true
    return

PRE_HOOK )

if game.SinglePlayer!

    :enabled, :key = gemotions.convars

	hook.Add( "PlayerButtonDown", "G-Emotions::Open", ( ply, keyCode ) ->
		if keyCode == key\GetInt! and enabled\GetBool!
            ply\ConCommand( "+gemotions " .. keyCode )
            return

    PRE_HOOK )

	hook.Add( "PlayerButtonUp", "G-Emotions::Close", ( ply, keyCode ) ->
		if keyCode == key\GetInt! and enabled\GetBool!
            ply\ConCommand( "-gemotions " .. keyCode )
            return

    PRE_HOOK )

-- Commands
concommand.Add "gemotions_reload", ( ply ) ->
    if not ply or ( ply\IsValid! and ply\IsSuperAdmin! )
        gemotions.LoadConfigs!
        startNetSync!
        net.Broadcast!
        Log( "Configs reloaded." )

do

    :Start, :WriteUInt, :WritePlayer, :WriteBool = net
    :GetPackage, :SoundExists = gemotions
    CHAN_STATIC = CHAN_STATIC
    tonumber = tonumber
    :random = math
    :find = string

    recipientFilter = RecipientFilter!

    concommand.Add "gemotion", ( ply, _, args ) ->
        package = GetPackage( tonumber( args[ 1 ] or "" ) or -1 )
        unless package
            return

        emotion = package.emotions[ tonumber( args[ 2 ] or "" ) or -1 ]
        unless emotion
            return

        noSound = true
        if ply\GetInfo( "gemotions_user_audio" ) == "1"
            soundPath = emotion.sound
            if istable( soundPath )
                soundPath = soundPath[ random( 1, #soundPath ) ]

            if isstring( soundPath )
                if find( soundPath, "^https?://.+$" ) ~= nil
                    noSound = false
                elseif SoundExists( soundPath )
                    entity\EmitSound( soundPath, 60, random( 90, 110 ), 1, CHAN_STATIC, 0, 1 )

        recipientFilter\RemoveAllPlayers!
        recipientFilter\AddPlayer( ply )
        recipientFilter\AddPVS( ply\EyePos! )

        Start( "GEmotions::Networking" )
        WriteUInt( 1, 2 )
        WritePlayer( ply )
        WriteUInt( package.id, 10 )
        WriteUInt( emotion.id, 14 )
        WriteBool( noSound )
        Send( recipientFilter )
        return

-- Packages Loading
file.CreateDir( "g-emotions/packages" )

gemotions.LoadConfigs = ->
    if #file.Find( "g-emotions/packages/*.json", "DATA" ) == 0
        file.Write( "g-emotions/packages/default.json", util.TableToJSON( {
            name: "Default Emotions"
            emotions: {
                {
                    name: "Bye"
                    material: "https://i.imgur.com/Js0BaH8.png"
                },
                {
                    name: "Hi"
                    material: "https://i.imgur.com/zGyb8kg.png"
                },
                {
                    name: "Clap"
                    material: "https://i.imgur.com/uDw75yg.png"
                },
                {
                    name: "Happy"
                    material: "https://i.imgur.com/eViUp2a.png"
                },
                {
                    name: "Evil"
                    material: "https://i.imgur.com/LwE4zvb.png"
                },
                {
                    name: "Huh"
                    material: "https://i.imgur.com/5lVtSdh.png"
                },
                {
                    name: "Rage"
                    material: "https://i.imgur.com/3mWmxDC.png"
                },
                {
                    name: "Wow"
                    material: "https://i.imgur.com/HwVJ2gU.png"
                },
                {
                    name: "Yawn"
                    material: "https://i.imgur.com/HDuxGW0.png"
                },
                {
                    name: "Sleep"
                    material: "https://i.imgur.com/q9nlpst.png"
                },
                {
                    name: "Think"
                    material: "https://i.imgur.com/IwyGXWk.png"
                },
                {
                    name: "Sob"
                    material: "https://i.imgur.com/74iJPOT.png"
                },
                {
                    name: "Shock"
                    material: "https://i.imgur.com/buNncWq.png"
                },
                {
                    name: "Rofl"
                    material: "https://i.imgur.com/E8gJerG.png"
                },
                {
                    name: "Scream"
                    material: "https://i.imgur.com/T2bc8Ed.png"
                },
                {
                    name: "Nerd"
                    material: "https://i.imgur.com/yyLZbGw.png"
                },
                {
                    name: "RMF Dance"
                    material: "https://raw.githubusercontent.com/rauchg/twemoji-cdn-1/gh-pages/72x72/1f4fb.png"
                    sound: "http://195.150.20.5:8000/rmf_dance"
                    lifetime: 300
                }
            }
        }, true ) )

        Log( "Default package created." )

    packages = file.Find( "g-emotions/packages/*.json", "DATA" )
    for index = 1, #packages
        fileName = packages[ index ]
        unless fileName
            continue

        json = file.Read( "g-emotions/packages/" .. fileName, "DATA" )
        unless json
            continue

        data = util.JSONToTable( json )
        unless data
            continue

        gemotions.RegisterPackage( data.name or fileName, data.emotions )
        return

hook.Add "InitPostEntity", "G-Emotions::LoadConfigs", gemotions.LoadConfigs, PRE_HOOK

for fileName in *file.Find( "g-emotions/packages/*.lua", "LUA" )
    include( "g-emotions/packages/" .. fileName )

for fileName in *file.Find( "gemotions/*.lua", "LUA" )
    include( "gemotions/" .. fileName )
