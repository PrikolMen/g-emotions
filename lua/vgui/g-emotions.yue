:acos, :cos, :sin, :pi, :sqrt, :ceil = math
:GetPhrase = language
gemotions = gemotions
:PlaySound = surface

screenWidth, screenHeight, screenCenterX, screenCenterY, vmin = 0, 0, 0, 0, 0
font1 = "G-Emotions::Header"
font2 = "G-Emotions::Body"

resolutionChanged = ->
    screenWidth, screenHeight = ScrW!, ScrH!
    vmin = math.min( screenWidth, screenHeight ) / 100
    screenCenterX, screenCenterY = screenWidth / 2, screenHeight / 2
    surface.CreateFont( font1, { font: "Roboto", size: vmin * 6, extended: true } )
    surface.CreateFont( font2, { font: "Roboto", size: vmin * 4, extended: true } )

hook.Add "OnScreenSizeChanged", "G-Emotions::Menu", resolutionChanged
resolutionChanged!

PANEL = {}

PANEL.Init = =>
    @PackageName = "Missing Name"
    @SelectedEmotion = nil
    @SelectedPackage = 1
    @SetVisible( false )
    @CircleRadius = 128
    @IconSize = 16
    @Emotions = {}
    @SetAlpha( 0 )
    return

PANEL.PerformLayout = =>
    @SetSize( screenWidth, screenHeight )
    @SetPos( 0, 0 )

    packageData = @GetSelectedPackage!
    unless packageData
        return

    packageStep, packageRadius = packageData.step, packageData.radius
    @PackageName = language.GetPhrase( packageData.name )
    emotions = @Emotions
    iconSize = vmin * 4
    radian = 0

    for index = 1, #emotions
        emotions[ index ] = nil

    @IconSize = iconSize
    circleRadius = iconSize * 2

    for index, emotion in ipairs( packageData.emotions )
        radian = index * packageStep - packageStep
        x = screenCenterX + cos( radian ) * packageRadius - iconSize / 2
        y = screenCenterY + sin( radian ) * packageRadius - iconSize / 2
        circleRadius = math.max( circleRadius, x - screenCenterX, y - screenCenterY )

        data = { :x, :y, alpha: 0, size: iconSize, scale: 1, selected: false }
        table.Merge( data, emotion )
        emotions[ index ] = data

    @CircleRadius = circleRadius - iconSize

do

    :GetPackage = gemotions

    PANEL.GetSelectedPackage = =>
        return GetPackage( @SelectedPackage or 0 )

do

    :GetEmotion = gemotions

    PANEL.GetSelectedEmote = =>
        return GetEmotion( @SelectedPackage or 0, @SelectedEmotion or 0 )

packagesCount = 0

do

    angle, length, index = 0, 0, 0

    PANEL.OnCursorMoved = ( x, y ) =>
        packageData = @GetSelectedPackage!
        unless packageData
            return

        x, y = x - screenCenterX, y - screenCenterY
        length = sqrt( x ^ 2 + y ^ 2 )
        if length < @CircleRadius
            @SelectedEmotion = nil
            return

        angle = acos( x / length )
        if y < 0
            angle = ( pi * 2 ) - angle

        index = ceil( angle / packageData.step ) % ( packageData.count + 1 )
        if index ~= @SelectedEmotion
            PlaySound( "g-emotions/ui/switch.ogg" )
            @SelectedEmotion = index

do

    curTime = 0

    PANEL.OnMouseWheeled = ( delta ) =>
        packagesCount = gemotions.packagesCount
        if packagesCount < 2
            return

        curTime = CurTime!
        if ( curTime - ( @LastMouseWheeled or 0 ) ) < 0.1
            return

        @LastMouseWheeled = curTime

        index = @SelectedPackage or 0
        if delta > 0
            index += 1
            if index > packagesCount
                index = 1

        elseif delta < 0
            index -= 1
            if index < 1
                index = packagesCount

        @SelectedPackage = index
        @SelectedEmotion = nil

        PlaySound( "g-emotions/ui/rollover.ogg" )
        @InvalidateLayout!
        return

:GetAlpha = FindMetaTable( "Panel" )

do

    :SetMaterial, :SetDrawColor, :DrawTexturedRect, :DrawRect, :DrawCircle, :DrawText, :GetTextSize, :SetFont, :SetTextColor, :SetTextPos = surface
    :UpdateScreenEffectTexture = render
    :DrawEmoteQuad = gemotions

    packageStep, packageRadius, isSelected = 0, 0, false
    blur = Material( "pp/blurscreen" )
    :SetFloat, :Recompute = blur

    PANEL.Paint = ( width, height ) =>
        -- Blur
        SetFloat( blur, "$blur", GetAlpha( @ ) / 64 )
        Recompute( blur )

        UpdateScreenEffectTexture!
        SetMaterial( blur )
        SetDrawColor( 255, 255, 255, 255 )
        DrawTexturedRect( 0, 0, width, height )

        SetDrawColor( 32, 32, 32, 240 )
        DrawRect( 0, 0, width, height )

        -- Circle
        DrawCircle( screenCenterX, screenCenterY, @CircleRadius, 128, 128, 128, 32 )
        SetTextColor( 255, 255, 255, 255 )

        -- Package Name
        text = @PackageName

        SetFont( font1 )
        textWidth, textHeight = GetTextSize( text )
        y = screenCenterY - ( @CircleRadius * 2 ) - @IconSize - ( textHeight / 2 )
        SetTextPos( screenCenterX - textWidth / 2, y )
        y += textHeight / 2
        DrawText( text )

        -- Package Count
        packagesCount = gemotions.packagesCount
        if packagesCount > 1
            text = string.format( "%d/%d", @SelectedPackage, packagesCount )

            SetFont( font2 )
            textWidth, textHeight = GetTextSize( text )

            SetTextPos( screenCenterX - textWidth / 2, screenCenterY - textHeight / 2 )
            DrawText( text )

        -- Emotions
        emotions, selected = @Emotions, @SelectedEmotion
        for index = 1, #emotions
            if selected == index
                continue

            emotion = emotions[ index ]
            unless emotion
                continue

            DrawEmoteQuad( emotion, emotion.x, emotion.y, emotion.size, emotion.size, emotion.alpha )

        if selected ~= nil
            emotion = emotions[ selected ]
            if emotion ~= nil
                DrawEmoteQuad( emotion, emotion.x, emotion.y, emotion.size, emotion.size, emotion.alpha )

                text = GetPhrase( emotion.name )
                SetFont( font2 )
                textWidth, textHeight = GetTextSize( text )
                y += textHeight / 2

                SetTextPos( screenCenterX - textWidth / 2, y )
                DrawText( text )

do

    alpha, iconSize, selected, scale, radian, size = 0, 0, 0, 0, 0, 0
    Lerp, RealFrameTime = Lerp, RealFrameTime

    PANEL.Think = =>
        packageData = @GetSelectedPackage!
        unless packageData
            return

        alpha, iconSize, selected = GetAlpha( @ ), @IconSize, @SelectedEmotion
        packageStep, packageRadius = packageData.step, packageData.radius

        emotions = @Emotions
        for index = 1, #emotions
            emotion = emotions[ index ]
            if emotion ~= nil
                emotion.selected = index == selected
                emotion.alpha = alpha * ( emotion.selected and 1 or 0.9 )

                emotion.scale = Lerp( RealFrameTime! * 12, emotion.scale, emotion.selected and 2 or 1 )
                emotion.size = iconSize * emotion.scale

                radian = index * packageStep - packageStep
                emotion.x = screenCenterX + cos( radian ) * packageRadius - emotion.size / 2
                emotion.y = screenCenterY + sin( radian ) * packageRadius - emotion.size / 2

do

    animDuration = 0.16
    animHide = ( _, pnl ) ->
        pnl\SetVisible( false )
        pnl\IsMouseInputEnabled( true )
        return

    PANEL.Show = =>
        if @IsVisible!
            return

        emote = @GetSelectedEmote!
        if emote ~= nil
            emote.scale = 1

        @SelectedEmotion = nil

        @Stop!
        @SetVisible( true )
        @AlphaTo( 255, animDuration )
        @MakePopup!
        @SetKeyboardInputEnabled( false )
        return

    PANEL.Hide = =>
        unless @IsVisible!
            return

        @Stop!
        @AlphaTo( 0, animDuration, _, animHide )
        @SetKeyboardInputEnabled( false )
        CloseDermaMenus!
        return

PANEL.OnMouseReleased = ( keyCode ) =>
    if keyCode > 106 and keyCode < 109
        if @SelectedEmotion ~= nil
            RunConsoleCommand( "gemotion", @SelectedPackage, @SelectedEmotion )

        PlaySound( "g-emotions/ui/bong.ogg" )
        @Hide!
        return

vgui.Register( "G-Emotions::Menu", PANEL, "EditablePanel" )
